import { ipcRenderer } from 'electron';

export const sdkPreloader = {
    getAccessModelMetadataAttribute: (request) => ipcRenderer.invoke('get-access-model-metadata-attribute', request),
    getAccessModelMetadataAttributeValue: (request) => ipcRenderer.invoke('get-access-model-metadata-attribute-value', request),
    listAccessModelMetadataAttribute: (request) => ipcRenderer.invoke('list-access-model-metadata-attribute', request),
    listAccessModelMetadataAttributeValue: (request) => ipcRenderer.invoke('list-access-model-metadata-attribute-value', request),
    createAccessProfile: (request) => ipcRenderer.invoke('create-access-profile', request),
    deleteAccessProfile: (request) => ipcRenderer.invoke('delete-access-profile', request),
    deleteAccessProfilesInBulk: (request) => ipcRenderer.invoke('delete-access-profiles-in-bulk', request),
    getAccessProfile: (request) => ipcRenderer.invoke('get-access-profile', request),
    getAccessProfileEntitlements: (request) => ipcRenderer.invoke('get-access-profile-entitlements', request),
    listAccessProfiles: (request) => ipcRenderer.invoke('list-access-profiles', request),
    patchAccessProfile: (request) => ipcRenderer.invoke('patch-access-profile', request),
    updateAccessProfilesInBulk: (request) => ipcRenderer.invoke('update-access-profiles-in-bulk', request),
    approveAccessRequest: (request) => ipcRenderer.invoke('approve-access-request', request),
    forwardAccessRequest: (request) => ipcRenderer.invoke('forward-access-request', request),
    getAccessRequestApprovalSummary: (request) => ipcRenderer.invoke('get-access-request-approval-summary', request),
    listAccessRequestApprovers: (request) => ipcRenderer.invoke('list-access-request-approvers', request),
    listCompletedApprovals: (request) => ipcRenderer.invoke('list-completed-approvals', request),
    listPendingApprovals: (request) => ipcRenderer.invoke('list-pending-approvals', request),
    rejectAccessRequest: (request) => ipcRenderer.invoke('reject-access-request', request),
    getAccessRequestIdentityMetrics: (request) => ipcRenderer.invoke('get-access-request-identity-metrics', request),
    approveBulkAccessRequest: (request) => ipcRenderer.invoke('approve-bulk-access-request', request),
    cancelAccessRequest: (request) => ipcRenderer.invoke('cancel-access-request', request),
    cancelAccessRequestInBulk: (request) => ipcRenderer.invoke('cancel-access-request-in-bulk', request),
    closeAccessRequest: (request) => ipcRenderer.invoke('close-access-request', request),
    createAccessRequest: (request) => ipcRenderer.invoke('create-access-request', request),
    getAccessRequestConfig: () => ipcRenderer.invoke('get-access-request-config'),
    getEntitlementDetailsForIdentity: (request) => ipcRenderer.invoke('get-entitlement-details-for-identity', request),
    listAccessRequestStatus: (request) => ipcRenderer.invoke('list-access-request-status', request),
    listAdministratorsAccessRequestStatus: (request) => ipcRenderer.invoke('list-administrators-access-request-status', request),
    loadAccountSelections: (request) => ipcRenderer.invoke('load-account-selections', request),
    setAccessRequestConfig: (request) => ipcRenderer.invoke('set-access-request-config', request),
    getAccountActivity: (request) => ipcRenderer.invoke('get-account-activity', request),
    listAccountActivities: (request) => ipcRenderer.invoke('list-account-activities', request),
    getAccountAggregationStatus: (request) => ipcRenderer.invoke('get-account-aggregation-status', request),
    getUsagesByAccountId: (request) => ipcRenderer.invoke('get-usages-by-account-id', request),
    createAccount: (request) => ipcRenderer.invoke('create-account', request),
    deleteAccount: (request) => ipcRenderer.invoke('delete-account', request),
    deleteAccountAsync: (request) => ipcRenderer.invoke('delete-account-async', request),
    disableAccount: (request) => ipcRenderer.invoke('disable-account', request),
    disableAccountForIdentity: (request) => ipcRenderer.invoke('disable-account-for-identity', request),
    disableAccountsForIdentities: (request) => ipcRenderer.invoke('disable-accounts-for-identities', request),
    enableAccount: (request) => ipcRenderer.invoke('enable-account', request),
    enableAccountForIdentity: (request) => ipcRenderer.invoke('enable-account-for-identity', request),
    enableAccountsForIdentities: (request) => ipcRenderer.invoke('enable-accounts-for-identities', request),
    getAccount: (request) => ipcRenderer.invoke('get-account', request),
    getAccountEntitlements: (request) => ipcRenderer.invoke('get-account-entitlements', request),
    listAccounts: (request) => ipcRenderer.invoke('list-accounts', request),
    putAccount: (request) => ipcRenderer.invoke('put-account', request),
    submitReloadAccount: (request) => ipcRenderer.invoke('submit-reload-account', request),
    unlockAccount: (request) => ipcRenderer.invoke('unlock-account', request),
    updateAccount: (request) => ipcRenderer.invoke('update-account', request),
    getDiscoveredApplications: (request) => ipcRenderer.invoke('get-discovered-applications', request),
    getManualDiscoverApplicationsCsvTemplate: () => ipcRenderer.invoke('get-manual-discover-applications-csv-template'),
    sendManualDiscoverApplicationsCsvTemplate: (request) => ipcRenderer.invoke('send-manual-discover-applications-csv-template', request),
    getApproval: (request) => ipcRenderer.invoke('get-approval', request),
    getApprovals: (request) => ipcRenderer.invoke('get-approvals', request),
    createSourceApp: (request) => ipcRenderer.invoke('create-source-app', request),
    deleteAccessProfilesFromSourceAppByBulk: (request) => ipcRenderer.invoke('delete-access-profiles-from-source-app-by-bulk', request),
    deleteSourceApp: (request) => ipcRenderer.invoke('delete-source-app', request),
    getSourceApp: (request) => ipcRenderer.invoke('get-source-app', request),
    listAccessProfilesForSourceApp: (request) => ipcRenderer.invoke('list-access-profiles-for-source-app', request),
    listAllSourceApp: (request) => ipcRenderer.invoke('list-all-source-app', request),
    listAllUserApps: (request) => ipcRenderer.invoke('list-all-user-apps', request),
    listAssignedSourceApp: (request) => ipcRenderer.invoke('list-assigned-source-app', request),
    listAvailableAccountsForUserApp: (request) => ipcRenderer.invoke('list-available-accounts-for-user-app', request),
    listAvailableSourceApps: (request) => ipcRenderer.invoke('list-available-source-apps', request),
    listOwnedUserApps: (request) => ipcRenderer.invoke('list-owned-user-apps', request),
    patchSourceApp: (request) => ipcRenderer.invoke('patch-source-app', request),
    patchUserApp: (request) => ipcRenderer.invoke('patch-user-app', request),
    updateSourceAppsInBulk: (request) => ipcRenderer.invoke('update-source-apps-in-bulk', request),
    getProfileConfig: (request) => ipcRenderer.invoke('get-profile-config', request),
    getProfileConfigList: (request) => ipcRenderer.invoke('get-profile-config-list', request),
    patchProfileConfig: (request) => ipcRenderer.invoke('patch-profile-config', request),
    getAuthUser: (request) => ipcRenderer.invoke('get-auth-user', request),
    patchAuthUser: (request) => ipcRenderer.invoke('patch-auth-user', request),
    createBrandingItem: (request) => ipcRenderer.invoke('create-branding-item', request),
    deleteBranding: (request) => ipcRenderer.invoke('delete-branding', request),
    getBranding: (request) => ipcRenderer.invoke('get-branding', request),
    getBrandingList: () => ipcRenderer.invoke('get-branding-list'),
    setBrandingItem: (request) => ipcRenderer.invoke('set-branding-item', request),
    createCampaignFilter: (request) => ipcRenderer.invoke('create-campaign-filter', request),
    deleteCampaignFilters: (request) => ipcRenderer.invoke('delete-campaign-filters', request),
    getCampaignFilterById: (request) => ipcRenderer.invoke('get-campaign-filter-by-id', request),
    listCampaignFilters: (request) => ipcRenderer.invoke('list-campaign-filters', request),
    updateCampaignFilter: (request) => ipcRenderer.invoke('update-campaign-filter', request),
    completeCampaign: (request) => ipcRenderer.invoke('complete-campaign', request),
    createCampaign: (request) => ipcRenderer.invoke('create-campaign', request),
    createCampaignTemplate: (request) => ipcRenderer.invoke('create-campaign-template', request),
    deleteCampaignTemplate: (request) => ipcRenderer.invoke('delete-campaign-template', request),
    deleteCampaignTemplateSchedule: (request) => ipcRenderer.invoke('delete-campaign-template-schedule', request),
    deleteCampaigns: (request) => ipcRenderer.invoke('delete-campaigns', request),
    getActiveCampaigns: (request) => ipcRenderer.invoke('get-active-campaigns', request),
    getCampaign: (request) => ipcRenderer.invoke('get-campaign', request),
    getCampaignReports: (request) => ipcRenderer.invoke('get-campaign-reports', request),
    getCampaignReportsConfig: () => ipcRenderer.invoke('get-campaign-reports-config'),
    getCampaignTemplate: (request) => ipcRenderer.invoke('get-campaign-template', request),
    getCampaignTemplateSchedule: (request) => ipcRenderer.invoke('get-campaign-template-schedule', request),
    getCampaignTemplates: (request) => ipcRenderer.invoke('get-campaign-templates', request),
    move: (request) => ipcRenderer.invoke('move', request),
    patchCampaignTemplate: (request) => ipcRenderer.invoke('patch-campaign-template', request),
    setCampaignReportsConfig: (request) => ipcRenderer.invoke('set-campaign-reports-config', request),
    setCampaignTemplateSchedule: (request) => ipcRenderer.invoke('set-campaign-template-schedule', request),
    startCampaign: (request) => ipcRenderer.invoke('start-campaign', request),
    startCampaignRemediationScan: (request) => ipcRenderer.invoke('start-campaign-remediation-scan', request),
    startCampaignReport: (request) => ipcRenderer.invoke('start-campaign-report', request),
    startGenerateCampaignTemplate: (request) => ipcRenderer.invoke('start-generate-campaign-template', request),
    updateCampaign: (request) => ipcRenderer.invoke('update-campaign', request),
    getIdentityAccessSummaries: (request) => ipcRenderer.invoke('get-identity-access-summaries', request),
    getIdentityDecisionSummary: (request) => ipcRenderer.invoke('get-identity-decision-summary', request),
    getIdentitySummaries: (request) => ipcRenderer.invoke('get-identity-summaries', request),
    getIdentitySummary: (request) => ipcRenderer.invoke('get-identity-summary', request),
    getCertificationTask: (request) => ipcRenderer.invoke('get-certification-task', request),
    getIdentityCertification: (request) => ipcRenderer.invoke('get-identity-certification', request),
    getIdentityCertificationItemPermissions: (request) => ipcRenderer.invoke('get-identity-certification-item-permissions', request),
    getPendingCertificationTasks: (request) => ipcRenderer.invoke('get-pending-certification-tasks', request),
    listCertificationReviewers: (request) => ipcRenderer.invoke('list-certification-reviewers', request),
    listIdentityAccessReviewItems: (request) => ipcRenderer.invoke('list-identity-access-review-items', request),
    listIdentityCertifications: (request) => ipcRenderer.invoke('list-identity-certifications', request),
    makeIdentityDecision: (request) => ipcRenderer.invoke('make-identity-decision', request),
    reassignIdentityCertifications: (request) => ipcRenderer.invoke('reassign-identity-certifications', request),
    signOffIdentityCertification: (request) => ipcRenderer.invoke('sign-off-identity-certification', request),
    submitReassignCertsAsync: (request) => ipcRenderer.invoke('submit-reassign-certs-async', request),
    deleteClassifyMachineAccountFromSource: (request) => ipcRenderer.invoke('delete-classify-machine-account-from-source', request),
    getClassifyMachineAccountFromSourceStatus: (request) => ipcRenderer.invoke('get-classify-machine-account-from-source-status', request),
    sendClassifyMachineAccountFromSource: (request) => ipcRenderer.invoke('send-classify-machine-account-from-source', request),
    createDeploy: (request) => ipcRenderer.invoke('create-deploy', request),
    createObjectMapping: (request) => ipcRenderer.invoke('create-object-mapping', request),
    createObjectMappings: (request) => ipcRenderer.invoke('create-object-mappings', request),
    createScheduledAction: (request) => ipcRenderer.invoke('create-scheduled-action', request),
    createUploadedConfiguration: (request) => ipcRenderer.invoke('create-uploaded-configuration', request),
    deleteBackup: (request) => ipcRenderer.invoke('delete-backup', request),
    deleteDraft: (request) => ipcRenderer.invoke('delete-draft', request),
    deleteObjectMapping: (request) => ipcRenderer.invoke('delete-object-mapping', request),
    deleteScheduledAction: (request) => ipcRenderer.invoke('delete-scheduled-action', request),
    deleteUploadedConfiguration: (request) => ipcRenderer.invoke('delete-uploaded-configuration', request),
    getDeploy: (request) => ipcRenderer.invoke('get-deploy', request),
    getObjectMappings: (request) => ipcRenderer.invoke('get-object-mappings', request),
    getUploadedConfiguration: (request) => ipcRenderer.invoke('get-uploaded-configuration', request),
    listBackups: (request) => ipcRenderer.invoke('list-backups', request),
    listDeploys: () => ipcRenderer.invoke('list-deploys'),
    listDrafts: (request) => ipcRenderer.invoke('list-drafts', request),
    listScheduledActions: () => ipcRenderer.invoke('list-scheduled-actions'),
    listUploadedConfigurations: (request) => ipcRenderer.invoke('list-uploaded-configurations', request),
    updateObjectMappings: (request) => ipcRenderer.invoke('update-object-mappings', request),
    updateScheduledAction: (request) => ipcRenderer.invoke('update-scheduled-action', request),
    createConnectorCustomizer: (request) => ipcRenderer.invoke('create-connector-customizer', request),
    createConnectorCustomizerVersion: (request) => ipcRenderer.invoke('create-connector-customizer-version', request),
    deleteConnectorCustomizer: (request) => ipcRenderer.invoke('delete-connector-customizer', request),
    getConnectorCustomizer: (request) => ipcRenderer.invoke('get-connector-customizer', request),
    listConnectorCustomizers: (request) => ipcRenderer.invoke('list-connector-customizers', request),
    putConnectorCustomizer: (request) => ipcRenderer.invoke('put-connector-customizer', request),
    createConnectorRule: (request) => ipcRenderer.invoke('create-connector-rule', request),
    deleteConnectorRule: (request) => ipcRenderer.invoke('delete-connector-rule', request),
    getConnectorRule: (request) => ipcRenderer.invoke('get-connector-rule', request),
    getConnectorRuleList: (request) => ipcRenderer.invoke('get-connector-rule-list', request),
    putConnectorRule: (request) => ipcRenderer.invoke('put-connector-rule', request),
    testConnectorRule: (request) => ipcRenderer.invoke('test-connector-rule', request),
    createCustomConnector: (request) => ipcRenderer.invoke('create-custom-connector', request),
    deleteCustomConnector: (request) => ipcRenderer.invoke('delete-custom-connector', request),
    getConnector: (request) => ipcRenderer.invoke('get-connector', request),
    getConnectorCorrelationConfig: (request) => ipcRenderer.invoke('get-connector-correlation-config', request),
    getConnectorList: (request) => ipcRenderer.invoke('get-connector-list', request),
    getConnectorSourceConfig: (request) => ipcRenderer.invoke('get-connector-source-config', request),
    getConnectorSourceTemplate: (request) => ipcRenderer.invoke('get-connector-source-template', request),
    getConnectorTranslations: (request) => ipcRenderer.invoke('get-connector-translations', request),
    putConnectorCorrelationConfig: (request) => ipcRenderer.invoke('put-connector-correlation-config', request),
    putConnectorSourceConfig: (request) => ipcRenderer.invoke('put-connector-source-config', request),
    putConnectorSourceTemplate: (request) => ipcRenderer.invoke('put-connector-source-template', request),
    putConnectorTranslations: (request) => ipcRenderer.invoke('put-connector-translations', request),
    updateConnector: (request) => ipcRenderer.invoke('update-connector', request),
    createFormDefinition: (request) => ipcRenderer.invoke('create-form-definition', request),
    createFormDefinitionDynamicSchema: (request) => ipcRenderer.invoke('create-form-definition-dynamic-schema', request),
    createFormDefinitionFileRequest: (request) => ipcRenderer.invoke('create-form-definition-file-request', request),
    createFormInstance: (request) => ipcRenderer.invoke('create-form-instance', request),
    deleteFormDefinition: (request) => ipcRenderer.invoke('delete-form-definition', request),
    exportFormDefinitionsByTenant: (request) => ipcRenderer.invoke('export-form-definitions-by-tenant', request),
    getFileFromS3: (request) => ipcRenderer.invoke('get-file-from-s3', request),
    getFormDefinitionByKey: (request) => ipcRenderer.invoke('get-form-definition-by-key', request),
    getFormInstanceByKey: (request) => ipcRenderer.invoke('get-form-instance-by-key', request),
    getFormInstanceFile: (request) => ipcRenderer.invoke('get-form-instance-file', request),
    importFormDefinitions: (request) => ipcRenderer.invoke('import-form-definitions', request),
    patchFormDefinition: (request) => ipcRenderer.invoke('patch-form-definition', request),
    patchFormInstance: (request) => ipcRenderer.invoke('patch-form-instance', request),
    searchFormDefinitionsByTenant: (request) => ipcRenderer.invoke('search-form-definitions-by-tenant', request),
    searchFormElementDataByElementID: (request) => ipcRenderer.invoke('search-form-element-data-by-element-id', request),
    searchFormInstancesByTenant: () => ipcRenderer.invoke('search-form-instances-by-tenant'),
    searchPreDefinedSelectOptions: () => ipcRenderer.invoke('search-pre-defined-select-options'),
    showPreviewDataSource: (request) => ipcRenderer.invoke('show-preview-data-source', request),
    createCustomPasswordInstructions: (request) => ipcRenderer.invoke('create-custom-password-instructions', request),
    deleteCustomPasswordInstructions: (request) => ipcRenderer.invoke('delete-custom-password-instructions', request),
    getCustomPasswordInstructions: (request) => ipcRenderer.invoke('get-custom-password-instructions', request),
    createDataSegment: (request) => ipcRenderer.invoke('create-data-segment', request),
    deleteDataSegment: (request) => ipcRenderer.invoke('delete-data-segment', request),
    getDataSegment: (request) => ipcRenderer.invoke('get-data-segment', request),
    getDataSegmentIdentityMembership: (request) => ipcRenderer.invoke('get-data-segment-identity-membership', request),
    getDataSegmentationEnabledForUser: (request) => ipcRenderer.invoke('get-data-segmentation-enabled-for-user', request),
    listDataSegments: (request) => ipcRenderer.invoke('list-data-segments', request),
    patchDataSegment: (request) => ipcRenderer.invoke('patch-data-segment', request),
    publishDataSegment: (request) => ipcRenderer.invoke('publish-data-segment', request),
    createDimension: (request) => ipcRenderer.invoke('create-dimension', request),
    deleteBulkDimensions: (request) => ipcRenderer.invoke('delete-bulk-dimensions', request),
    deleteDimension: (request) => ipcRenderer.invoke('delete-dimension', request),
    getDimension: (request) => ipcRenderer.invoke('get-dimension', request),
    getDimensionEntitlements: (request) => ipcRenderer.invoke('get-dimension-entitlements', request),
    listDimensionAccessProfiles: (request) => ipcRenderer.invoke('list-dimension-access-profiles', request),
    listDimensions: (request) => ipcRenderer.invoke('list-dimensions', request),
    patchDimension: (request) => ipcRenderer.invoke('patch-dimension', request),
    createAccessModelMetadataForEntitlement: (request) => ipcRenderer.invoke('create-access-model-metadata-for-entitlement', request),
    deleteAccessModelMetadataFromEntitlement: (request) => ipcRenderer.invoke('delete-access-model-metadata-from-entitlement', request),
    getEntitlement: (request) => ipcRenderer.invoke('get-entitlement', request),
    getEntitlementRequestConfig: (request) => ipcRenderer.invoke('get-entitlement-request-config', request),
    importEntitlementsBySource: (request) => ipcRenderer.invoke('import-entitlements-by-source', request),
    listEntitlementChildren: (request) => ipcRenderer.invoke('list-entitlement-children', request),
    listEntitlementParents: (request) => ipcRenderer.invoke('list-entitlement-parents', request),
    listEntitlements: (request) => ipcRenderer.invoke('list-entitlements', request),
    patchEntitlement: (request) => ipcRenderer.invoke('patch-entitlement', request),
    putEntitlementRequestConfig: (request) => ipcRenderer.invoke('put-entitlement-request-config', request),
    resetSourceEntitlements: (request) => ipcRenderer.invoke('reset-source-entitlements', request),
    updateEntitlementsInBulk: (request) => ipcRenderer.invoke('update-entitlements-in-bulk', request),
    createAuthOrgNetworkConfig: (request) => ipcRenderer.invoke('create-auth-org-network-config', request),
    getAuthOrgLockoutConfig: () => ipcRenderer.invoke('get-auth-org-lockout-config'),
    getAuthOrgNetworkConfig: () => ipcRenderer.invoke('get-auth-org-network-config'),
    getAuthOrgServiceProviderConfig: () => ipcRenderer.invoke('get-auth-org-service-provider-config'),
    getAuthOrgSessionConfig: () => ipcRenderer.invoke('get-auth-org-session-config'),
    patchAuthOrgLockoutConfig: (request) => ipcRenderer.invoke('patch-auth-org-lockout-config', request),
    patchAuthOrgNetworkConfig: (request) => ipcRenderer.invoke('patch-auth-org-network-config', request),
    patchAuthOrgServiceProviderConfig: (request) => ipcRenderer.invoke('patch-auth-org-service-provider-config', request),
    patchAuthOrgSessionConfig: (request) => ipcRenderer.invoke('patch-auth-org-session-config', request),
    createWorkgroup: (request) => ipcRenderer.invoke('create-workgroup', request),
    deleteWorkgroup: (request) => ipcRenderer.invoke('delete-workgroup', request),
    deleteWorkgroupMembers: (request) => ipcRenderer.invoke('delete-workgroup-members', request),
    deleteWorkgroupsInBulk: (request) => ipcRenderer.invoke('delete-workgroups-in-bulk', request),
    getWorkgroup: (request) => ipcRenderer.invoke('get-workgroup', request),
    listConnections: (request) => ipcRenderer.invoke('list-connections', request),
    listWorkgroupMembers: (request) => ipcRenderer.invoke('list-workgroup-members', request),
    listWorkgroups: (request) => ipcRenderer.invoke('list-workgroups', request),
    patchWorkgroup: (request) => ipcRenderer.invoke('patch-workgroup', request),
    updateWorkgroupMembers: (request) => ipcRenderer.invoke('update-workgroup-members', request),
    addAccessRequestRecommendationsIgnoredItem: (request) => ipcRenderer.invoke('add-access-request-recommendations-ignored-item', request),
    addAccessRequestRecommendationsRequestedItem: (request) => ipcRenderer.invoke('add-access-request-recommendations-requested-item', request),
    addAccessRequestRecommendationsViewedItem: (request) => ipcRenderer.invoke('add-access-request-recommendations-viewed-item', request),
    addAccessRequestRecommendationsViewedItems: (request) => ipcRenderer.invoke('add-access-request-recommendations-viewed-items', request),
    getAccessRequestRecommendations: (request) => ipcRenderer.invoke('get-access-request-recommendations', request),
    getAccessRequestRecommendationsConfig: (request) => ipcRenderer.invoke('get-access-request-recommendations-config', request),
    getAccessRequestRecommendationsIgnoredItems: (request) => ipcRenderer.invoke('get-access-request-recommendations-ignored-items', request),
    getAccessRequestRecommendationsRequestedItems: (request) => ipcRenderer.invoke('get-access-request-recommendations-requested-items', request),
    getAccessRequestRecommendationsViewedItems: (request) => ipcRenderer.invoke('get-access-request-recommendations-viewed-items', request),
    setAccessRequestRecommendationsConfig: (request) => ipcRenderer.invoke('set-access-request-recommendations-config', request),
    createCommonAccess: (request) => ipcRenderer.invoke('create-common-access', request),
    getCommonAccess: (request) => ipcRenderer.invoke('get-common-access', request),
    updateCommonAccessStatusInBulk: (request) => ipcRenderer.invoke('update-common-access-status-in-bulk', request),
    exportOutliersZip: (request) => ipcRenderer.invoke('export-outliers-zip', request),
    getIdentityOutlierSnapshots: (request) => ipcRenderer.invoke('get-identity-outlier-snapshots', request),
    getIdentityOutliers: (request) => ipcRenderer.invoke('get-identity-outliers', request),
    getLatestIdentityOutlierSnapshots: (request) => ipcRenderer.invoke('get-latest-identity-outlier-snapshots', request),
    getOutlierContributingFeatureSummary: (request) => ipcRenderer.invoke('get-outlier-contributing-feature-summary', request),
    getPeerGroupOutliersContributingFeatures: (request) => ipcRenderer.invoke('get-peer-group-outliers-contributing-features', request),
    ignoreIdentityOutliers: (request) => ipcRenderer.invoke('ignore-identity-outliers', request),
    listOutliersContributingFeatureAccessItems: (request) => ipcRenderer.invoke('list-outliers-contributing-feature-access-items', request),
    unIgnoreIdentityOutliers: (request) => ipcRenderer.invoke('un-ignore-identity-outliers', request),
    getPeerGroupOutliers: (request) => ipcRenderer.invoke('get-peer-group-outliers', request),
    getRecommendations: (request) => ipcRenderer.invoke('get-recommendations', request),
    getRecommendationsConfig: (request) => ipcRenderer.invoke('get-recommendations-config', request),
    updateRecommendationsConfig: (request) => ipcRenderer.invoke('update-recommendations-config', request),
    createPotentialRoleProvisionRequest: (request) => ipcRenderer.invoke('create-potential-role-provision-request', request),
    createRoleMiningSessions: (request) => ipcRenderer.invoke('create-role-mining-sessions', request),
    downloadRoleMiningPotentialRoleZip: (request) => ipcRenderer.invoke('download-role-mining-potential-role-zip', request),
    exportRoleMiningPotentialRole: (request) => ipcRenderer.invoke('export-role-mining-potential-role', request),
    exportRoleMiningPotentialRoleAsync: (request) => ipcRenderer.invoke('export-role-mining-potential-role-async', request),
    exportRoleMiningPotentialRoleStatus: (request) => ipcRenderer.invoke('export-role-mining-potential-role-status', request),
    getAllPotentialRoleSummaries: (request) => ipcRenderer.invoke('get-all-potential-role-summaries', request),
    getEntitlementDistributionPotentialRole: (request) => ipcRenderer.invoke('get-entitlement-distribution-potential-role', request),
    getEntitlementsPotentialRole: (request) => ipcRenderer.invoke('get-entitlements-potential-role', request),
    getExcludedEntitlementsPotentialRole: (request) => ipcRenderer.invoke('get-excluded-entitlements-potential-role', request),
    getIdentitiesPotentialRole: (request) => ipcRenderer.invoke('get-identities-potential-role', request),
    getPotentialRole: (request) => ipcRenderer.invoke('get-potential-role', request),
    getPotentialRoleApplications: (request) => ipcRenderer.invoke('get-potential-role-applications', request),
    getPotentialRoleEntitlements: (request) => ipcRenderer.invoke('get-potential-role-entitlements', request),
    getPotentialRoleSourceIdentityUsage: (request) => ipcRenderer.invoke('get-potential-role-source-identity-usage', request),
    getPotentialRoleSummaries: (request) => ipcRenderer.invoke('get-potential-role-summaries', request),
    getRoleMiningPotentialRole: (request) => ipcRenderer.invoke('get-role-mining-potential-role', request),
    getRoleMiningSession: (request) => ipcRenderer.invoke('get-role-mining-session', request),
    getRoleMiningSessionStatus: (request) => ipcRenderer.invoke('get-role-mining-session-status', request),
    getRoleMiningSessions: (request) => ipcRenderer.invoke('get-role-mining-sessions', request),
    getSavedPotentialRoles: (request) => ipcRenderer.invoke('get-saved-potential-roles', request),
    patchPotentialRole: (request) => ipcRenderer.invoke('patch-potential-role', request),
    patchPotentialRole_0: (request) => ipcRenderer.invoke('patch-potential-role-0', request),
    patchRoleMiningSession: (request) => ipcRenderer.invoke('patch-role-mining-session', request),
    updateEntitlementsPotentialRole: (request) => ipcRenderer.invoke('update-entitlements-potential-role', request),
    deleteIcon: (request) => ipcRenderer.invoke('delete-icon', request),
    setIcon: (request) => ipcRenderer.invoke('set-icon', request),
    deleteIdentity: (request) => ipcRenderer.invoke('delete-identity', request),
    getIdentity: (request) => ipcRenderer.invoke('get-identity', request),
    getIdentityOwnershipDetails: (request) => ipcRenderer.invoke('get-identity-ownership-details', request),
    getRoleAssignment: (request) => ipcRenderer.invoke('get-role-assignment', request),
    getRoleAssignments: (request) => ipcRenderer.invoke('get-role-assignments', request),
    listIdentities: (request) => ipcRenderer.invoke('list-identities', request),
    resetIdentity: (request) => ipcRenderer.invoke('reset-identity', request),
    sendIdentityVerificationAccountToken: (request) => ipcRenderer.invoke('send-identity-verification-account-token', request),
    startIdentitiesInvite: (request) => ipcRenderer.invoke('start-identities-invite', request),
    startIdentityProcessing: (request) => ipcRenderer.invoke('start-identity-processing', request),
    synchronizeAttributesForIdentity: (request) => ipcRenderer.invoke('synchronize-attributes-for-identity', request),
    createIdentityAttribute: (request) => ipcRenderer.invoke('create-identity-attribute', request),
    deleteIdentityAttribute: (request) => ipcRenderer.invoke('delete-identity-attribute', request),
    deleteIdentityAttributesInBulk: (request) => ipcRenderer.invoke('delete-identity-attributes-in-bulk', request),
    getIdentityAttribute: (request) => ipcRenderer.invoke('get-identity-attribute', request),
    listIdentityAttributes: (request) => ipcRenderer.invoke('list-identity-attributes', request),
    putIdentityAttribute: (request) => ipcRenderer.invoke('put-identity-attribute', request),
    compareIdentitySnapshots: (request) => ipcRenderer.invoke('compare-identity-snapshots', request),
    compareIdentitySnapshotsAccessType: (request) => ipcRenderer.invoke('compare-identity-snapshots-access-type', request),
    getHistoricalIdentity: (request) => ipcRenderer.invoke('get-historical-identity', request),
    getHistoricalIdentityEvents: (request) => ipcRenderer.invoke('get-historical-identity-events', request),
    getIdentitySnapshot: (request) => ipcRenderer.invoke('get-identity-snapshot', request),
    getIdentitySnapshotSummary: (request) => ipcRenderer.invoke('get-identity-snapshot-summary', request),
    getIdentityStartDate: (request) => ipcRenderer.invoke('get-identity-start-date', request),
    listHistoricalIdentities: (request) => ipcRenderer.invoke('list-historical-identities', request),
    listIdentityAccessItems: (request) => ipcRenderer.invoke('list-identity-access-items', request),
    listIdentitySnapshotAccessItems: (request) => ipcRenderer.invoke('list-identity-snapshot-access-items', request),
    listIdentitySnapshots: (request) => ipcRenderer.invoke('list-identity-snapshots', request),
    createIdentityProfile: (request) => ipcRenderer.invoke('create-identity-profile', request),
    deleteIdentityProfile: (request) => ipcRenderer.invoke('delete-identity-profile', request),
    deleteIdentityProfiles: (request) => ipcRenderer.invoke('delete-identity-profiles', request),
    exportIdentityProfiles: (request) => ipcRenderer.invoke('export-identity-profiles', request),
    generateIdentityPreview: (request) => ipcRenderer.invoke('generate-identity-preview', request),
    getDefaultIdentityAttributeConfig: (request) => ipcRenderer.invoke('get-default-identity-attribute-config', request),
    getIdentityProfile: (request) => ipcRenderer.invoke('get-identity-profile', request),
    importIdentityProfiles: (request) => ipcRenderer.invoke('import-identity-profiles', request),
    listIdentityProfiles: (request) => ipcRenderer.invoke('list-identity-profiles', request),
    syncIdentityProfile: (request) => ipcRenderer.invoke('sync-identity-profile', request),
    updateIdentityProfile: (request) => ipcRenderer.invoke('update-identity-profile', request),
    createLifecycleState: (request) => ipcRenderer.invoke('create-lifecycle-state', request),
    deleteLifecycleState: (request) => ipcRenderer.invoke('delete-lifecycle-state', request),
    getLifecycleState: (request) => ipcRenderer.invoke('get-lifecycle-state', request),
    getLifecycleStates: (request) => ipcRenderer.invoke('get-lifecycle-states', request),
    setLifecycleState: (request) => ipcRenderer.invoke('set-lifecycle-state', request),
    updateLifecycleStates: (request) => ipcRenderer.invoke('update-lifecycle-states', request),
    getMFADuoConfig: () => ipcRenderer.invoke('get-mfa-duo-config'),
    getMFAKbaConfig: (request) => ipcRenderer.invoke('get-mfa-kba-config', request),
    getMFAOktaConfig: () => ipcRenderer.invoke('get-mfa-okta-config'),
    setMFADuoConfig: (request) => ipcRenderer.invoke('set-mfa-duo-config', request),
    setMFAKBAConfig: (request) => ipcRenderer.invoke('set-mfakba-config', request),
    setMFAOktaConfig: (request) => ipcRenderer.invoke('set-mfa-okta-config', request),
    testMFAConfig: (request) => ipcRenderer.invoke('test-mfa-config', request),
    sendClassifyMachineAccount: (request) => ipcRenderer.invoke('send-classify-machine-account', request),
    createMachineAccountMappings: (request) => ipcRenderer.invoke('create-machine-account-mappings', request),
    deleteMachineAccountMappings: (request) => ipcRenderer.invoke('delete-machine-account-mappings', request),
    listMachineAccountMappings: (request) => ipcRenderer.invoke('list-machine-account-mappings', request),
    setMachineAccountMappings: (request) => ipcRenderer.invoke('set-machine-account-mappings', request),
    getMachineAccount: (request) => ipcRenderer.invoke('get-machine-account', request),
    listMachineAccounts: (request) => ipcRenderer.invoke('list-machine-accounts', request),
    updateMachineAccount: (request) => ipcRenderer.invoke('update-machine-account', request),
    deleteMachineClassificationConfig: (request) => ipcRenderer.invoke('delete-machine-classification-config', request),
    getMachineClassificationConfig: (request) => ipcRenderer.invoke('get-machine-classification-config', request),
    setMachineClassificationConfig: (request) => ipcRenderer.invoke('set-machine-classification-config', request),
    createMachineIdentity: (request) => ipcRenderer.invoke('create-machine-identity', request),
    deleteMachineIdentity: (request) => ipcRenderer.invoke('delete-machine-identity', request),
    getMachineIdentity: (request) => ipcRenderer.invoke('get-machine-identity', request),
    listMachineIdentities: (request) => ipcRenderer.invoke('list-machine-identities', request),
    updateMachineIdentity: (request) => ipcRenderer.invoke('update-machine-identity', request),
    createManagedClient: (request) => ipcRenderer.invoke('create-managed-client', request),
    deleteManagedClient: (request) => ipcRenderer.invoke('delete-managed-client', request),
    getManagedClient: (request) => ipcRenderer.invoke('get-managed-client', request),
    getManagedClientStatus: (request) => ipcRenderer.invoke('get-managed-client-status', request),
    getManagedClients: (request) => ipcRenderer.invoke('get-managed-clients', request),
    updateManagedClient: (request) => ipcRenderer.invoke('update-managed-client', request),
    createManagedClusterType: (request) => ipcRenderer.invoke('create-managed-cluster-type', request),
    deleteManagedClusterType: (request) => ipcRenderer.invoke('delete-managed-cluster-type', request),
    getManagedClusterType: (request) => ipcRenderer.invoke('get-managed-cluster-type', request),
    getManagedClusterTypes: (request) => ipcRenderer.invoke('get-managed-cluster-types', request),
    updateManagedClusterType: (request) => ipcRenderer.invoke('update-managed-cluster-type', request),
    createManagedCluster: (request) => ipcRenderer.invoke('create-managed-cluster', request),
    deleteManagedCluster: (request) => ipcRenderer.invoke('delete-managed-cluster', request),
    getClientLogConfiguration: (request) => ipcRenderer.invoke('get-client-log-configuration', request),
    getManagedCluster: (request) => ipcRenderer.invoke('get-managed-cluster', request),
    getManagedClusters: (request) => ipcRenderer.invoke('get-managed-clusters', request),
    putClientLogConfiguration: (request) => ipcRenderer.invoke('put-client-log-configuration', request),
    update: (request) => ipcRenderer.invoke('update', request),
    updateManagedCluster: (request) => ipcRenderer.invoke('update-managed-cluster', request),
    createMultiHostIntegration: (request) => ipcRenderer.invoke('create-multi-host-integration', request),
    createSourcesWithinMultiHost: (request) => ipcRenderer.invoke('create-sources-within-multi-host', request),
    deleteMultiHost: (request) => ipcRenderer.invoke('delete-multi-host', request),
    getAcctAggregationGroups: (request) => ipcRenderer.invoke('get-acct-aggregation-groups', request),
    getEntitlementAggregationGroups: (request) => ipcRenderer.invoke('get-entitlement-aggregation-groups', request),
    getMultiHostIntegrations: (request) => ipcRenderer.invoke('get-multi-host-integrations', request),
    getMultiHostIntegrationsList: (request) => ipcRenderer.invoke('get-multi-host-integrations-list', request),
    getMultiHostSourceCreationErrors: (request) => ipcRenderer.invoke('get-multi-host-source-creation-errors', request),
    getMultihostIntegrationTypes: () => ipcRenderer.invoke('get-multihost-integration-types'),
    getSourcesWithinMultiHost: (request) => ipcRenderer.invoke('get-sources-within-multi-host', request),
    testConnectionMultiHostSources: (request) => ipcRenderer.invoke('test-connection-multi-host-sources', request),
    testSourceConnectionMultihost: (request) => ipcRenderer.invoke('test-source-connection-multihost', request),
    updateMultiHostSources: (request) => ipcRenderer.invoke('update-multi-host-sources', request),
    approveNonEmployeeRequest: (request) => ipcRenderer.invoke('approve-non-employee-request', request),
    createNonEmployeeRecord: (request) => ipcRenderer.invoke('create-non-employee-record', request),
    createNonEmployeeRequest: (request) => ipcRenderer.invoke('create-non-employee-request', request),
    createNonEmployeeSource: (request) => ipcRenderer.invoke('create-non-employee-source', request),
    createNonEmployeeSourceSchemaAttributes: (request) => ipcRenderer.invoke('create-non-employee-source-schema-attributes', request),
    deleteNonEmployeeRecord: (request) => ipcRenderer.invoke('delete-non-employee-record', request),
    deleteNonEmployeeRecordsInBulk: (request) => ipcRenderer.invoke('delete-non-employee-records-in-bulk', request),
    deleteNonEmployeeRequest: (request) => ipcRenderer.invoke('delete-non-employee-request', request),
    deleteNonEmployeeSchemaAttribute: (request) => ipcRenderer.invoke('delete-non-employee-schema-attribute', request),
    deleteNonEmployeeSource: (request) => ipcRenderer.invoke('delete-non-employee-source', request),
    deleteNonEmployeeSourceSchemaAttributes: (request) => ipcRenderer.invoke('delete-non-employee-source-schema-attributes', request),
    exportNonEmployeeRecords: (request) => ipcRenderer.invoke('export-non-employee-records', request),
    exportNonEmployeeSourceSchemaTemplate: (request) => ipcRenderer.invoke('export-non-employee-source-schema-template', request),
    getNonEmployeeApproval: (request) => ipcRenderer.invoke('get-non-employee-approval', request),
    getNonEmployeeApprovalSummary: (request) => ipcRenderer.invoke('get-non-employee-approval-summary', request),
    getNonEmployeeBulkUploadStatus: (request) => ipcRenderer.invoke('get-non-employee-bulk-upload-status', request),
    getNonEmployeeRecord: (request) => ipcRenderer.invoke('get-non-employee-record', request),
    getNonEmployeeRequest: (request) => ipcRenderer.invoke('get-non-employee-request', request),
    getNonEmployeeRequestSummary: (request) => ipcRenderer.invoke('get-non-employee-request-summary', request),
    getNonEmployeeSchemaAttribute: (request) => ipcRenderer.invoke('get-non-employee-schema-attribute', request),
    getNonEmployeeSource: (request) => ipcRenderer.invoke('get-non-employee-source', request),
    getNonEmployeeSourceSchemaAttributes: (request) => ipcRenderer.invoke('get-non-employee-source-schema-attributes', request),
    importNonEmployeeRecordsInBulk: (request) => ipcRenderer.invoke('import-non-employee-records-in-bulk', request),
    listNonEmployeeApprovals: (request) => ipcRenderer.invoke('list-non-employee-approvals', request),
    listNonEmployeeRecords: (request) => ipcRenderer.invoke('list-non-employee-records', request),
    listNonEmployeeRequests: (request) => ipcRenderer.invoke('list-non-employee-requests', request),
    listNonEmployeeSources: (request) => ipcRenderer.invoke('list-non-employee-sources', request),
    patchNonEmployeeRecord: (request) => ipcRenderer.invoke('patch-non-employee-record', request),
    patchNonEmployeeSchemaAttribute: (request) => ipcRenderer.invoke('patch-non-employee-schema-attribute', request),
    patchNonEmployeeSource: (request) => ipcRenderer.invoke('patch-non-employee-source', request),
    rejectNonEmployeeRequest: (request) => ipcRenderer.invoke('reject-non-employee-request', request),
    updateNonEmployeeRecord: (request) => ipcRenderer.invoke('update-non-employee-record', request),
    createDomainDkim: (request) => ipcRenderer.invoke('create-domain-dkim', request),
    createNotificationTemplate: (request) => ipcRenderer.invoke('create-notification-template', request),
    createVerifiedFromAddress: (request) => ipcRenderer.invoke('create-verified-from-address', request),
    deleteNotificationTemplatesInBulk: (request) => ipcRenderer.invoke('delete-notification-templates-in-bulk', request),
    deleteVerifiedFromAddress: (request) => ipcRenderer.invoke('delete-verified-from-address', request),
    getDkimAttributes: (request) => ipcRenderer.invoke('get-dkim-attributes', request),
    getMailFromAttributes: (request) => ipcRenderer.invoke('get-mail-from-attributes', request),
    getNotificationTemplate: (request) => ipcRenderer.invoke('get-notification-template', request),
    getNotificationsTemplateContext: (request) => ipcRenderer.invoke('get-notifications-template-context', request),
    listFromAddresses: (request) => ipcRenderer.invoke('list-from-addresses', request),
    listNotificationPreferences: (request) => ipcRenderer.invoke('list-notification-preferences', request),
    listNotificationTemplateDefaults: (request) => ipcRenderer.invoke('list-notification-template-defaults', request),
    listNotificationTemplates: (request) => ipcRenderer.invoke('list-notification-templates', request),
    putMailFromAttributes: (request) => ipcRenderer.invoke('put-mail-from-attributes', request),
    sendTestNotification: (request) => ipcRenderer.invoke('send-test-notification', request),
    createOauthClient: (request) => ipcRenderer.invoke('create-oauth-client', request),
    deleteOauthClient: (request) => ipcRenderer.invoke('delete-oauth-client', request),
    getOauthClient: (request) => ipcRenderer.invoke('get-oauth-client', request),
    listOauthClients: (request) => ipcRenderer.invoke('list-oauth-clients', request),
    patchOauthClient: (request) => ipcRenderer.invoke('patch-oauth-client', request),
    getOrgConfig: () => ipcRenderer.invoke('get-org-config'),
    getValidTimeZones: (request) => ipcRenderer.invoke('get-valid-time-zones', request),
    patchOrgConfig: (request) => ipcRenderer.invoke('patch-org-config', request),
    createPasswordOrgConfig: (request) => ipcRenderer.invoke('create-password-org-config', request),
    getPasswordOrgConfig: () => ipcRenderer.invoke('get-password-org-config'),
    putPasswordOrgConfig: (request) => ipcRenderer.invoke('put-password-org-config', request),
    getPasswordDictionary: () => ipcRenderer.invoke('get-password-dictionary'),
    putPasswordDictionary: (request) => ipcRenderer.invoke('put-password-dictionary', request),
    createDigitToken: (request) => ipcRenderer.invoke('create-digit-token', request),
    getPasswordChangeStatus: (request) => ipcRenderer.invoke('get-password-change-status', request),
    queryPasswordInfo: (request) => ipcRenderer.invoke('query-password-info', request),
    setPassword: (request) => ipcRenderer.invoke('set-password', request),
    createPasswordPolicy: (request) => ipcRenderer.invoke('create-password-policy', request),
    deletePasswordPolicy: (request) => ipcRenderer.invoke('delete-password-policy', request),
    getPasswordPolicyById: (request) => ipcRenderer.invoke('get-password-policy-by-id', request),
    listPasswordPolicies: (request) => ipcRenderer.invoke('list-password-policies', request),
    setPasswordPolicy: (request) => ipcRenderer.invoke('set-password-policy', request),
    createPasswordSyncGroup: (request) => ipcRenderer.invoke('create-password-sync-group', request),
    deletePasswordSyncGroup: (request) => ipcRenderer.invoke('delete-password-sync-group', request),
    getPasswordSyncGroup: (request) => ipcRenderer.invoke('get-password-sync-group', request),
    getPasswordSyncGroups: (request) => ipcRenderer.invoke('get-password-sync-groups', request),
    updatePasswordSyncGroup: (request) => ipcRenderer.invoke('update-password-sync-group', request),
    createPersonalAccessToken: (request) => ipcRenderer.invoke('create-personal-access-token', request),
    deletePersonalAccessToken: (request) => ipcRenderer.invoke('delete-personal-access-token', request),
    listPersonalAccessTokens: (request) => ipcRenderer.invoke('list-personal-access-tokens', request),
    patchPersonalAccessToken: (request) => ipcRenderer.invoke('patch-personal-access-token', request),
    getPublicIdentities: (request) => ipcRenderer.invoke('get-public-identities', request),
    getPublicIdentityConfig: () => ipcRenderer.invoke('get-public-identity-config'),
    updatePublicIdentityConfig: (request) => ipcRenderer.invoke('update-public-identity-config', request),
    cancelReport: (request) => ipcRenderer.invoke('cancel-report', request),
    getReport: (request) => ipcRenderer.invoke('get-report', request),
    getReportResult: (request) => ipcRenderer.invoke('get-report-result', request),
    startReport: (request) => ipcRenderer.invoke('start-report', request),
    listRequestableObjects: (request) => ipcRenderer.invoke('list-requestable-objects', request),
    createRoleInsightRequests: (request) => ipcRenderer.invoke('create-role-insight-requests', request),
    downloadRoleInsightsEntitlementsChanges: (request) => ipcRenderer.invoke('download-role-insights-entitlements-changes', request),
    getEntitlementChangesIdentities: (request) => ipcRenderer.invoke('get-entitlement-changes-identities', request),
    getRoleInsight: (request) => ipcRenderer.invoke('get-role-insight', request),
    getRoleInsights: (request) => ipcRenderer.invoke('get-role-insights', request),
    getRoleInsightsCurrentEntitlements: (request) => ipcRenderer.invoke('get-role-insights-current-entitlements', request),
    getRoleInsightsEntitlementsChanges: (request) => ipcRenderer.invoke('get-role-insights-entitlements-changes', request),
    getRoleInsightsRequests: (request) => ipcRenderer.invoke('get-role-insights-requests', request),
    getRoleInsightsSummary: (request) => ipcRenderer.invoke('get-role-insights-summary', request),
    createRole: (request) => ipcRenderer.invoke('create-role', request),
    deleteBulkRoles: (request) => ipcRenderer.invoke('delete-bulk-roles', request),
    deleteMetadataFromRoleByKeyAndValue: (request) => ipcRenderer.invoke('delete-metadata-from-role-by-key-and-value', request),
    deleteRole: (request) => ipcRenderer.invoke('delete-role', request),
    getBulkUpdateStatus: () => ipcRenderer.invoke('get-bulk-update-status'),
    getBulkUpdateStatusById: (request) => ipcRenderer.invoke('get-bulk-update-status-by-id', request),
    getRole: (request) => ipcRenderer.invoke('get-role', request),
    getRoleAssignedIdentities: (request) => ipcRenderer.invoke('get-role-assigned-identities', request),
    getRoleEntitlements: (request) => ipcRenderer.invoke('get-role-entitlements', request),
    listRoles: (request) => ipcRenderer.invoke('list-roles', request),
    patchRole: (request) => ipcRenderer.invoke('patch-role', request),
    searchRolesByFilter: (request) => ipcRenderer.invoke('search-roles-by-filter', request),
    updateAttributeKeyAndValueToRole: (request) => ipcRenderer.invoke('update-attribute-key-and-value-to-role', request),
    updateRolesMetadataByFilter: (request) => ipcRenderer.invoke('update-roles-metadata-by-filter', request),
    updateRolesMetadataByIds: (request) => ipcRenderer.invoke('update-roles-metadata-by-ids', request),
    updateRolesMetadataByQuery: (request) => ipcRenderer.invoke('update-roles-metadata-by-query', request),
    createSIMIntegration: (request) => ipcRenderer.invoke('create-sim-integration', request),
    deleteSIMIntegration: (request) => ipcRenderer.invoke('delete-sim-integration', request),
    getSIMIntegration: (request) => ipcRenderer.invoke('get-sim-integration', request),
    getSIMIntegrations: (request) => ipcRenderer.invoke('get-sim-integrations', request),
    patchBeforeProvisioningRule: (request) => ipcRenderer.invoke('patch-before-provisioning-rule', request),
    patchSIMAttributes: (request) => ipcRenderer.invoke('patch-sim-attributes', request),
    putSIMIntegration: (request) => ipcRenderer.invoke('put-sim-integration', request),
    createSodPolicy: (request) => ipcRenderer.invoke('create-sod-policy', request),
    deleteSodPolicy: (request) => ipcRenderer.invoke('delete-sod-policy', request),
    deleteSodPolicySchedule: (request) => ipcRenderer.invoke('delete-sod-policy-schedule', request),
    getCustomViolationReport: (request) => ipcRenderer.invoke('get-custom-violation-report', request),
    getDefaultViolationReport: (request) => ipcRenderer.invoke('get-default-violation-report', request),
    getSodAllReportRunStatus: () => ipcRenderer.invoke('get-sod-all-report-run-status'),
    getSodPolicy: (request) => ipcRenderer.invoke('get-sod-policy', request),
    getSodPolicySchedule: (request) => ipcRenderer.invoke('get-sod-policy-schedule', request),
    getSodViolationReportRunStatus: (request) => ipcRenderer.invoke('get-sod-violation-report-run-status', request),
    getSodViolationReportStatus: (request) => ipcRenderer.invoke('get-sod-violation-report-status', request),
    listSodPolicies: (request) => ipcRenderer.invoke('list-sod-policies', request),
    patchSodPolicy: (request) => ipcRenderer.invoke('patch-sod-policy', request),
    putPolicySchedule: (request) => ipcRenderer.invoke('put-policy-schedule', request),
    putSodPolicy: (request) => ipcRenderer.invoke('put-sod-policy', request),
    startEvaluateSodPolicy: (request) => ipcRenderer.invoke('start-evaluate-sod-policy', request),
    startSodAllPoliciesForOrg: (request) => ipcRenderer.invoke('start-sod-all-policies-for-org', request),
    startSodPolicy: (request) => ipcRenderer.invoke('start-sod-policy', request),
    startPredictSodViolations: (request) => ipcRenderer.invoke('start-predict-sod-violations', request),
    startViolationCheck: (request) => ipcRenderer.invoke('start-violation-check', request),
    exportSpConfig: (request) => ipcRenderer.invoke('export-sp-config', request),
    getSpConfigExport: (request) => ipcRenderer.invoke('get-sp-config-export', request),
    getSpConfigExportStatus: (request) => ipcRenderer.invoke('get-sp-config-export-status', request),
    getSpConfigImport: (request) => ipcRenderer.invoke('get-sp-config-import', request),
    getSpConfigImportStatus: (request) => ipcRenderer.invoke('get-sp-config-import-status', request),
    importSpConfig: (request) => ipcRenderer.invoke('import-sp-config', request),
    listSpConfigObjects: () => ipcRenderer.invoke('list-sp-config-objects'),
    createSavedSearch: (request) => ipcRenderer.invoke('create-saved-search', request),
    deleteSavedSearch: (request) => ipcRenderer.invoke('delete-saved-search', request),
    executeSavedSearch: (request) => ipcRenderer.invoke('execute-saved-search', request),
    getSavedSearch: (request) => ipcRenderer.invoke('get-saved-search', request),
    listSavedSearches: (request) => ipcRenderer.invoke('list-saved-searches', request),
    putSavedSearch: (request) => ipcRenderer.invoke('put-saved-search', request),
    createScheduledSearch: (request) => ipcRenderer.invoke('create-scheduled-search', request),
    deleteScheduledSearch: (request) => ipcRenderer.invoke('delete-scheduled-search', request),
    getScheduledSearch: (request) => ipcRenderer.invoke('get-scheduled-search', request),
    listScheduledSearch: (request) => ipcRenderer.invoke('list-scheduled-search', request),
    unsubscribeScheduledSearch: (request) => ipcRenderer.invoke('unsubscribe-scheduled-search', request),
    updateScheduledSearch: (request) => ipcRenderer.invoke('update-scheduled-search', request),
    searchAggregate: (request) => ipcRenderer.invoke('search-aggregate', request),
    searchCount: (request) => ipcRenderer.invoke('search-count', request),
    searchGet: (request) => ipcRenderer.invoke('search-get', request),
    searchPost: (request) => ipcRenderer.invoke('search-post', request),
    createSearchAttributeConfig: (request) => ipcRenderer.invoke('create-search-attribute-config', request),
    deleteSearchAttributeConfig: (request) => ipcRenderer.invoke('delete-search-attribute-config', request),
    getSearchAttributeConfig: (request) => ipcRenderer.invoke('get-search-attribute-config', request),
    getSingleSearchAttributeConfig: (request) => ipcRenderer.invoke('get-single-search-attribute-config', request),
    patchSearchAttributeConfig: (request) => ipcRenderer.invoke('patch-search-attribute-config', request),
    createSegment: (request) => ipcRenderer.invoke('create-segment', request),
    deleteSegment: (request) => ipcRenderer.invoke('delete-segment', request),
    getSegment: (request) => ipcRenderer.invoke('get-segment', request),
    listSegments: (request) => ipcRenderer.invoke('list-segments', request),
    patchSegment: (request) => ipcRenderer.invoke('patch-segment', request),
    createServiceDeskIntegration: (request) => ipcRenderer.invoke('create-service-desk-integration', request),
    deleteServiceDeskIntegration: (request) => ipcRenderer.invoke('delete-service-desk-integration', request),
    getServiceDeskIntegration: (request) => ipcRenderer.invoke('get-service-desk-integration', request),
    getServiceDeskIntegrationTemplate: (request) => ipcRenderer.invoke('get-service-desk-integration-template', request),
    getServiceDeskIntegrationTypes: () => ipcRenderer.invoke('get-service-desk-integration-types'),
    getServiceDeskIntegrations: (request) => ipcRenderer.invoke('get-service-desk-integrations', request),
    getStatusCheckDetails: () => ipcRenderer.invoke('get-status-check-details'),
    patchServiceDeskIntegration: (request) => ipcRenderer.invoke('patch-service-desk-integration', request),
    putServiceDeskIntegration: (request) => ipcRenderer.invoke('put-service-desk-integration', request),
    updateStatusCheckDetails: (request) => ipcRenderer.invoke('update-status-check-details', request),
    getStatusBySourceId: (request) => ipcRenderer.invoke('get-status-by-source-id', request),
    getUsagesBySourceId: (request) => ipcRenderer.invoke('get-usages-by-source-id', request),
    createProvisioningPolicy: (request) => ipcRenderer.invoke('create-provisioning-policy', request),
    createSource: (request) => ipcRenderer.invoke('create-source', request),
    createSourceSchedule: (request) => ipcRenderer.invoke('create-source-schedule', request),
    createSourceSchema: (request) => ipcRenderer.invoke('create-source-schema', request),
    deleteAccountsAsync: (request) => ipcRenderer.invoke('delete-accounts-async', request),
    deleteNativeChangeDetectionConfig: (request) => ipcRenderer.invoke('delete-native-change-detection-config', request),
    deleteProvisioningPolicy: (request) => ipcRenderer.invoke('delete-provisioning-policy', request),
    deleteSource: (request) => ipcRenderer.invoke('delete-source', request),
    deleteSourceSchedule: (request) => ipcRenderer.invoke('delete-source-schedule', request),
    deleteSourceSchema: (request) => ipcRenderer.invoke('delete-source-schema', request),
    getAccountsSchema: (request) => ipcRenderer.invoke('get-accounts-schema', request),
    getCorrelationConfig: (request) => ipcRenderer.invoke('get-correlation-config', request),
    getEntitlementsSchema: (request) => ipcRenderer.invoke('get-entitlements-schema', request),
    getNativeChangeDetectionConfig: (request) => ipcRenderer.invoke('get-native-change-detection-config', request),
    getProvisioningPolicy: (request) => ipcRenderer.invoke('get-provisioning-policy', request),
    getSource: (request) => ipcRenderer.invoke('get-source', request),
    getSourceAttrSyncConfig: (request) => ipcRenderer.invoke('get-source-attr-sync-config', request),
    getSourceConfig: (request) => ipcRenderer.invoke('get-source-config', request),
    getSourceConnections: (request) => ipcRenderer.invoke('get-source-connections', request),
    getSourceEntitlementRequestConfig: (request) => ipcRenderer.invoke('get-source-entitlement-request-config', request),
    getSourceHealth: (request) => ipcRenderer.invoke('get-source-health', request),
    getSourceSchedule: (request) => ipcRenderer.invoke('get-source-schedule', request),
    getSourceSchedules: (request) => ipcRenderer.invoke('get-source-schedules', request),
    getSourceSchema: (request) => ipcRenderer.invoke('get-source-schema', request),
    getSourceSchemas: (request) => ipcRenderer.invoke('get-source-schemas', request),
    importAccounts: (request) => ipcRenderer.invoke('import-accounts', request),
    importAccountsSchema: (request) => ipcRenderer.invoke('import-accounts-schema', request),
    importConnectorFile: (request) => ipcRenderer.invoke('import-connector-file', request),
    importEntitlements: (request) => ipcRenderer.invoke('import-entitlements', request),
    importEntitlementsSchema: (request) => ipcRenderer.invoke('import-entitlements-schema', request),
    importUncorrelatedAccounts: (request) => ipcRenderer.invoke('import-uncorrelated-accounts', request),
    listProvisioningPolicies: (request) => ipcRenderer.invoke('list-provisioning-policies', request),
    listSources: (request) => ipcRenderer.invoke('list-sources', request),
    pingCluster: (request) => ipcRenderer.invoke('ping-cluster', request),
    putCorrelationConfig: (request) => ipcRenderer.invoke('put-correlation-config', request),
    putNativeChangeDetectionConfig: (request) => ipcRenderer.invoke('put-native-change-detection-config', request),
    putProvisioningPolicy: (request) => ipcRenderer.invoke('put-provisioning-policy', request),
    putSource: (request) => ipcRenderer.invoke('put-source', request),
    putSourceAttrSyncConfig: (request) => ipcRenderer.invoke('put-source-attr-sync-config', request),
    putSourceSchema: (request) => ipcRenderer.invoke('put-source-schema', request),
    searchResourceObjects: (request) => ipcRenderer.invoke('search-resource-objects', request),
    syncAttributesForSource: (request) => ipcRenderer.invoke('sync-attributes-for-source', request),
    testSourceConfiguration: (request) => ipcRenderer.invoke('test-source-configuration', request),
    testSourceConnection: (request) => ipcRenderer.invoke('test-source-connection', request),
    updatePasswordPolicyHolders: (request) => ipcRenderer.invoke('update-password-policy-holders', request),
    updateProvisioningPoliciesInBulk: (request) => ipcRenderer.invoke('update-provisioning-policies-in-bulk', request),
    updateProvisioningPolicy: (request) => ipcRenderer.invoke('update-provisioning-policy', request),
    updateSource: (request) => ipcRenderer.invoke('update-source', request),
    updateSourceEntitlementRequestConfig: (request) => ipcRenderer.invoke('update-source-entitlement-request-config', request),
    updateSourceSchedule: (request) => ipcRenderer.invoke('update-source-schedule', request),
    updateSourceSchema: (request) => ipcRenderer.invoke('update-source-schema', request),
    getSedBatchStats: (request) => ipcRenderer.invoke('get-sed-batch-stats', request),
    getSedBatches: (request) => ipcRenderer.invoke('get-sed-batches', request),
    listSeds: (request) => ipcRenderer.invoke('list-seds', request),
    patchSed: (request) => ipcRenderer.invoke('patch-sed', request),
    submitSedApproval: (request) => ipcRenderer.invoke('submit-sed-approval', request),
    submitSedAssignment: (request) => ipcRenderer.invoke('submit-sed-assignment', request),
    submitSedBatchRequest: (request) => ipcRenderer.invoke('submit-sed-batch-request', request),
    deleteTaggedObject: (request) => ipcRenderer.invoke('delete-tagged-object', request),
    deleteTagsToManyObject: (request) => ipcRenderer.invoke('delete-tags-to-many-object', request),
    getTaggedObject: (request) => ipcRenderer.invoke('get-tagged-object', request),
    listTaggedObjects: (request) => ipcRenderer.invoke('list-tagged-objects', request),
    listTaggedObjectsByType: (request) => ipcRenderer.invoke('list-tagged-objects-by-type', request),
    putTaggedObject: (request) => ipcRenderer.invoke('put-tagged-object', request),
    setTagToObject: (request) => ipcRenderer.invoke('set-tag-to-object', request),
    setTagsToManyObjects: (request) => ipcRenderer.invoke('set-tags-to-many-objects', request),
    getPendingTaskHeaders: (request) => ipcRenderer.invoke('get-pending-task-headers', request),
    getPendingTasks: (request) => ipcRenderer.invoke('get-pending-tasks', request),
    getTaskStatus: (request) => ipcRenderer.invoke('get-task-status', request),
    getTaskStatusList: (request) => ipcRenderer.invoke('get-task-status-list', request),
    updateTaskStatus: (request) => ipcRenderer.invoke('update-task-status', request),
    getTenant: () => ipcRenderer.invoke('get-tenant'),
    getTenantContext: (request) => ipcRenderer.invoke('get-tenant-context', request),
    patchTenantContext: (request) => ipcRenderer.invoke('patch-tenant-context', request),
    createTransform: (request) => ipcRenderer.invoke('create-transform', request),
    deleteTransform: (request) => ipcRenderer.invoke('delete-transform', request),
    getTransform: (request) => ipcRenderer.invoke('get-transform', request),
    listTransforms: (request) => ipcRenderer.invoke('list-transforms', request),
    updateTransform: (request) => ipcRenderer.invoke('update-transform', request),
    completeTriggerInvocation: (request) => ipcRenderer.invoke('complete-trigger-invocation', request),
    createSubscription: (request) => ipcRenderer.invoke('create-subscription', request),
    deleteSubscription: (request) => ipcRenderer.invoke('delete-subscription', request),
    listSubscriptions: (request) => ipcRenderer.invoke('list-subscriptions', request),
    listTriggerInvocationStatus: (request) => ipcRenderer.invoke('list-trigger-invocation-status', request),
    listTriggers: (request) => ipcRenderer.invoke('list-triggers', request),
    patchSubscription: (request) => ipcRenderer.invoke('patch-subscription', request),
    startTestTriggerInvocation: (request) => ipcRenderer.invoke('start-test-trigger-invocation', request),
    testSubscriptionFilter: (request) => ipcRenderer.invoke('test-subscription-filter', request),
    updateSubscription: (request) => ipcRenderer.invoke('update-subscription', request),
    getTenantUiMetadata: (request) => ipcRenderer.invoke('get-tenant-ui-metadata', request),
    setTenantUiMetadata: (request) => ipcRenderer.invoke('set-tenant-ui-metadata', request),
    createVendorConnectorMapping: (request) => ipcRenderer.invoke('create-vendor-connector-mapping', request),
    deleteVendorConnectorMapping: (request) => ipcRenderer.invoke('delete-vendor-connector-mapping', request),
    getVendorConnectorMappings: () => ipcRenderer.invoke('get-vendor-connector-mappings'),
    approveApprovalItem: (request) => ipcRenderer.invoke('approve-approval-item', request),
    approveApprovalItemsInBulk: (request) => ipcRenderer.invoke('approve-approval-items-in-bulk', request),
    completeWorkItem: (request) => ipcRenderer.invoke('complete-work-item', request),
    forwardWorkItem: (request) => ipcRenderer.invoke('forward-work-item', request),
    getCompletedWorkItems: (request) => ipcRenderer.invoke('get-completed-work-items', request),
    getCountCompletedWorkItems: (request) => ipcRenderer.invoke('get-count-completed-work-items', request),
    getCountWorkItems: (request) => ipcRenderer.invoke('get-count-work-items', request),
    getWorkItem: (request) => ipcRenderer.invoke('get-work-item', request),
    getWorkItemsSummary: (request) => ipcRenderer.invoke('get-work-items-summary', request),
    listWorkItems: (request) => ipcRenderer.invoke('list-work-items', request),
    rejectApprovalItem: (request) => ipcRenderer.invoke('reject-approval-item', request),
    rejectApprovalItemsInBulk: (request) => ipcRenderer.invoke('reject-approval-items-in-bulk', request),
    submitAccountSelection: (request) => ipcRenderer.invoke('submit-account-selection', request),
    createReassignmentConfiguration: (request) => ipcRenderer.invoke('create-reassignment-configuration', request),
    deleteReassignmentConfiguration: (request) => ipcRenderer.invoke('delete-reassignment-configuration', request),
    getEvaluateReassignmentConfiguration: (request) => ipcRenderer.invoke('get-evaluate-reassignment-configuration', request),
    getReassignmentConfigTypes: (request) => ipcRenderer.invoke('get-reassignment-config-types', request),
    getReassignmentConfiguration: (request) => ipcRenderer.invoke('get-reassignment-configuration', request),
    getTenantConfigConfiguration: (request) => ipcRenderer.invoke('get-tenant-config-configuration', request),
    listReassignmentConfigurations: (request) => ipcRenderer.invoke('list-reassignment-configurations', request),
    putReassignmentConfig: (request) => ipcRenderer.invoke('put-reassignment-config', request),
    putTenantConfiguration: (request) => ipcRenderer.invoke('put-tenant-configuration', request),
    cancelWorkflowExecution: (request) => ipcRenderer.invoke('cancel-workflow-execution', request),
    createExternalExecuteWorkflow: (request) => ipcRenderer.invoke('create-external-execute-workflow', request),
    createWorkflow: (request) => ipcRenderer.invoke('create-workflow', request),
    createWorkflowExternalTrigger: (request) => ipcRenderer.invoke('create-workflow-external-trigger', request),
    deleteWorkflow: (request) => ipcRenderer.invoke('delete-workflow', request),
    getWorkflow: (request) => ipcRenderer.invoke('get-workflow', request),
    getWorkflowExecution: (request) => ipcRenderer.invoke('get-workflow-execution', request),
    getWorkflowExecutionHistory: (request) => ipcRenderer.invoke('get-workflow-execution-history', request),
    getWorkflowExecutions: (request) => ipcRenderer.invoke('get-workflow-executions', request),
    listCompleteWorkflowLibrary: (request) => ipcRenderer.invoke('list-complete-workflow-library', request),
    listWorkflowLibraryActions: (request) => ipcRenderer.invoke('list-workflow-library-actions', request),
    listWorkflowLibraryOperators: () => ipcRenderer.invoke('list-workflow-library-operators'),
    listWorkflowLibraryTriggers: (request) => ipcRenderer.invoke('list-workflow-library-triggers', request),
    listWorkflows: () => ipcRenderer.invoke('list-workflows'),
    patchWorkflow: (request) => ipcRenderer.invoke('patch-workflow', request),
    putWorkflow: (request) => ipcRenderer.invoke('put-workflow', request),
    testExternalExecuteWorkflow: (request) => ipcRenderer.invoke('test-external-execute-workflow', request),
    testWorkflow: (request) => ipcRenderer.invoke('test-workflow', request),
    
};